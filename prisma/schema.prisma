generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
}

enum UsageType {
  TEXT_GENERATION
  IMAGE_GENERATION
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  usageLogs     UsageLog[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id                      String          @id @default(cuid())
  slug                    String          @unique
  name                    String
  description             String?
  currency                String          @default("USD")
  priceCents              Int?            @default(0)
  dailyGenerationsLimit   Int?
  monthlyGenerationsLimit Int?
  isActive                Boolean         @default(true)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  subscriptions           Subscription[]
}

model Subscription {
  id               String              @id @default(cuid())
  userId           String              @unique
  planId           String
  status           SubscriptionStatus  @default(ACTIVE)
  startedAt        DateTime            @default(now())
  currentPeriodEnd DateTime?
  cancelAt         DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  plan Plan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageLog {
  id        String    @id @default(cuid())
  userId    String
  type      UsageType @default(TEXT_GENERATION)
  createdAt DateTime  @default(now())
  promptId  String?
  meta      Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, type, createdAt])
}
