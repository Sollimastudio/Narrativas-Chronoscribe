import path from "path";
import process from "process";
import { VertexAI } from "@google-cloud/vertexai";

export async function POST(req: Request) {
  try {
    const keyPath = path.join(process.cwd(), "service-account-key.json");
    console.log("üîë Carregando credenciais de:", keyPath);

    process.env.GOOGLE_APPLICATION_CREDENTIALS = keyPath;

    const vertexAI = new VertexAI({
      project: process.env.GOOGLE_CLOUD_PROJECT || "chronoscribe-narratives",
      location: process.env.GOOGLE_CLOUD_LOCATION || "us-central1",
      keyFilename: keyPath,
    });

    const body = await req.json();
    const prompt =
      body.prompt || "Escreva algo po√©tico sobre Sol Lima e o poder da mente üåû";

    // üîÑ Escolha do modelo (pode trocar ‚Äúpro‚Äù ou ‚Äúflash‚Äù)
    const MODE = "flash";
    const stableModel =
      MODE === "flash" ? "gemini-1.5-flash" : "gemini-1.5-pro";
    const previewModel =
      "gemini-2.5-flash-preview-09-2025"; // usado apenas se o SDK falhar

    console.log("üöÄ Tentando modelo est√°vel:", stableModel);

    try {
      // Primeira tentativa com o SDK oficial
      const generativeModel = vertexAI.getGenerativeModel({
        model: stableModel,
      });

      const result = await generativeModel.generateContent({
        contents: [
          {
            role: "user",
            parts: [{ text: prompt }],
          },
        ],
      });

      const text =
        result.response.candidates?.[0]?.content?.parts?.[0]?.text ||
        "‚ö†Ô∏è Nenhum texto gerado pelo modelo est√°vel.";

      return new Response(JSON.stringify({ text }), { status: 200 });
    } catch (sdkError: any) {
      console.warn("‚ö†Ô∏è SDK falhou, tentando via REST Preview API...", sdkError);

      // Segunda tentativa: chamada direta ao modelo Preview via REST
      const endpoint = `https://us-central1-aiplatform.googleapis.com/v1/projects/${process.env.GOOGLE_CLOUD_PROJECT}/locations/us-central1/publishers/google/models/${previewModel}:generateContent`;

      const accessTokenCmd = `gcloud auth print-access-token`;
      const { execSync } = await import("child_process");
      const accessToken = execSync(accessTokenCmd).toString().trim();

      const response = await fetch(endpoint, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${accessToken}`,
        },
        body: JSON.stringify({
          contents: [{ role: "user", parts: [{ text: prompt }] }],
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Erro REST: ${errorText}`);
      }

      const data = await response.json();
      const text =
        data?.candidates?.[0]?.content?.parts?.[0]?.text ||
        "‚ö†Ô∏è Nenhum texto gerado pelo modelo preview.";

      return new Response(JSON.stringify({ text }), { status: 200 });
    }
  } catch (error: any) {
    console.error("‚ùå Erro final ao gerar conte√∫do:", error);
    return new Response(
      JSON.stringify({
        error: error.message || "Erro desconhecido no Vertex AI h√≠brido.",
      }),
      { status: 500 }
    );
  }
}

